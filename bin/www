#!/usr/bin/env node
"use strict";

/**
 * Module dependencies.
 */

/* Creating the client manager */
var clientManager = require("../modules/sockets/ClientManager").instance;

/* Doing app stuff */
var app = require("../app");
var debug = require("debug")("RPGMUD:server");
var http = require("http");
var sharedsession = require("express-socket.io-session");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Socket.io connection
 */
var io = require("socket.io")(server);
io.on("connection", function(socket)
{
  clientManager.onConnection(socket);
});

/**
 * Sharing the session between socketio and express app
 */
/* Setting up socket to have access to the session variable */
io.use(sharedsession(app.locals.middleware.session,
{
  autoSave: true
}));

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
